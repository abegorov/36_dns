//
// named.conf
//
// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
// server as a caching only nameserver (as a localhost DNS resolver only).
//
// See /usr/share/doc/bind*/sample/ for example named configuration files.
//

options {
  listen-on port 53 { 127.0.0.1; {{ bind_listen_on }}; };
  listen-on-v6 port 53 { ::1; {{ bind_listen_on_v6 }}; };
  directory          "/var/named";
  dump-file          "/var/named/data/cache_dump.db";
  statistics-file    "/var/named/data/named_stats.txt";
  memstatistics-file "/var/named/data/named_mem_stats.txt";
  secroots-file      "/var/named/data/named.secroots";
  recursing-file     "/var/named/data/named.recursing";

  allow-query { {{ bind_allow_query }}; };
  allow-transfer { {{ bind_allow_transfer }}; };
  allow-update { {{ bind_allow_update }}; };

  /*
    - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.
    - If you are building a RECURSIVE (caching) DNS server, you need to enable
      recursion.
    - If your recursive DNS server has a public IP address, you MUST enable access
      control to limit queries to your legitimate users. Failing to do so will
      cause your server to become part of large scale DNS amplification
      attacks. Implementing BCP38 within your network would greatly
      reduce such attack surface
  */
  recursion {{ 'yes' if bind_recursion else 'no' }};

  dnssec-validation auto;

  managed-keys-directory "/var/named/dynamic";
  geoip-directory "/usr/share/GeoIP";

  pid-file "/run/named/named.pid";
  session-keyfile "/run/named/session.key";

  /* https://fedoraproject.org/wiki/Changes/CryptoPolicy */
  include "/etc/crypto-policies/back-ends/bind.config";
};

logging {
  channel default_debug {
    file "data/named.run";
    severity dynamic;
  };
};

zone "." IN {
  type hint;
  file "named.ca";
};

include "/etc/named.rfc1912.zones";
include "/etc/named.root.key";

include "/etc/rndc.key";
include "/etc/named/zonetransfer.key";

controls {
  inet 127.0.0.1 allow { 127.0.0.1; } keys { "rndc-key"; };
  inet ::1 allow { ::1; } keys { "rndc-key"; };
  inet {{ bind_rndc_control }} allow { {{ bind_rndc_allow }}; } keys { "rndc-key"; };
};

{% for server in bind_zonetransfer_servers %}
server {{ server }} { keys { "zonetransfer-key"; }; };
{% endfor %}
{% for zone, opts in bind_zones.items() %}

zone "{{ zone }}" {
  type {{ opts.type }};
  {% if opts.masters | default(False) %}
  masters { {{ opts.masters }}; };
  {% endif %}
  {% if opts.allow_transfer | default(False)  %}
  allow-transfer { key "zonetransfer-key"; };
  {% endif %}
  {% if opts.allow_update | default(False) %}
  allow-update { key "zonetransfer-key"; };
  {% endif %}
  {% if opts.type == "slave" %}
  file "/var/named/slaves/{{ zone }}";
  {% elif opts.allow_update | default(False) %}
  file "/var/named/dynamic/{{ zone }}";
  {% else %}
  file "/var/named/data/{{ zone }}";
  {% endif %}
};
{% endfor %}
